{"mappings":"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","sources":["src/main.js"],"sourcesContent":["// Funktionen för att visa felmeddelanden\nfunction displayErrors(errors) {\n  const errorList = document.getElementById('error-list');\n  errorList.innerHTML = \"\";                       // Rensa befintlig lista\n\n  errors.forEach(error => {\n      const li = document.createElement('li');\n      li.textContent = error;\n      errorList.appendChild(li);                 // Lägg till felmeddelande i listan\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const url = \"http://localhost:3000/cv\";\n\n// Kör koden endast om den aktuella sidan är index.html\nif (window.location.pathname === \"/index.html\") {\n  fetchCvs(url);                           // Hämta och visa CV-data\n}\n\n // Kör koden endast om den aktuella sidan är add.html\n else if (window.location.pathname === \"/add.html\") {\n\n  //Hämta in ID för cvForm och lägg till lyssnare\n  document.getElementById('cvForm').addEventListener('submit', async function(event) {\n    event.preventDefault();             // Förhindra standardbeteende för formuläret\n    let companyname = document.getElementById('companyname').value;\n    let jobtitle = document.getElementById('jobtitle').value;\n    let location = document.getElementById('location').value;\n\n// Skapa en array för att lagra felmeddelanden\nlet errors = [];\n\n  // Kontrollera om något av fälten är tomt och lägg till lämpligt felmeddelande i arrayen\n  if (!companyname) {\n    errors.push(\"Company name is required\");\n}\nif (!jobtitle) {\n    errors.push(\"Job title is required\");\n}\nif (!location) {\n    errors.push(\"Location is required\");\n}\n\n// Om det finns fel, visa dem och avbryt formulärinsändningen\nif (errors.length > 0) {\ndisplayErrors(errors);\nreturn;\n}\n\n// Om inga fel finns, skicka data till servern och återställ formuläret\nawait createWork(url, companyname, jobtitle, location); // Skicka data till servern\nawait fetchCvs(url); // Uppdatera CV-listan efter att data har lagts till\nresetForm();\n\n  });\n}\n\n\n\n//Formulär för att hämta data från servern\nasync function fetchCvs(){\n  try{\n  const response = await fetch(url);\n  const data = await response.json();\n  \n  const ul = document.getElementById(\"cv-list\");\n  if (!ul) {\n    console.error(\"UL element not found\");\n    return;\n  }\n  \n\n  ul.innerHTML = \"\";                          //Rensar listan\n  \n  data.forEach(cv => {\n    console.log('CV ID:', cv._id); // Kontrollera värdet av cv._id\n    const li = document.createElement('li');  //Skapar <li>-element\n\n    const companySpan = createSpanWithText(`Company: ${cv.companyname}`);\n    const jobTitleSpan = createSpanWithText(`Job Title: ${cv.jobtitle}`);\n    const locationSpan = createSpanWithText(`Location: ${cv.location}`);\n  \n    //Skapa delete-knapp\n    const deleteBtn = document.createElement('button');\n    deleteBtn.textContent = \"Radera\";\n    deleteBtn.addEventListener(\"click\", async () => {\n      event.preventDefault();                 //Förhindrar att formuläret skickas vid klick. Nu kan klicket anropa \"deleteCV\"-funktionen korrekt.\n      await deleteCv(url, cv._id);\n      await fetchCvs(url);\n    })\n\n     // Lägg till spans i <li>-elementet\n     li.appendChild(companySpan);\n     li.appendChild(jobTitleSpan);\n     li.appendChild(locationSpan);\n     li.appendChild(deleteBtn);\n \n     ul.appendChild(li);                       //Lägger till <li>-element till <ul>\n   });\n \n\n} catch (error){\n  console.error(\"Fel uppstod vid hämtning av CV-data:\", error);\n}\n}\n\nfunction createSpanWithText(text) {\n  const span = document.createElement('span');\n  span.textContent = text;\n  return span;\n}\n\n//Metod för radera post\nasync function deleteCv(url, id) {\n  try {\n    console.log('ID att radera:', id); //Kontroll för att se om ID är korrekt\n    const response = await fetch(`${url}/${id}`, {\n      method: 'DELETE'\n    });\n\n    console.log(_id)\n    console.log(url)\n    if (response.ok) {\n      // CV-posten raderades framgångsrikt\n      console.log('CV post deleted successfully');\n    } else {\n      // CV-posten raderades inte\n      console.error('Failed to delete CV');\n    }\n    // Uppdatera listan efter borttagning av CV-posten\n    await fetchCvs();\n  } catch (error) {\n    console.error('Error deleting CV:', error);\n  }\n}\n\n//Skapa post\nasync function createWork(url, companyname, jobtitle, location) {\n  let work = {                                        //Skapar nytt objekt som skickar till databasen\n      companyname: companyname,\n      jobtitle: jobtitle,\n      location: location\n  };\n  const response = await fetch(url, {                 //Databasens URL som argument   \n      method: \"POST\",                                 //POST för att skicka data till databasen\n      headers: {\n          \"content-type\": \"Application/json\"          //Anger att det är JSON-data som skickas till databasen\n      },\n      body: JSON.stringify(work)                      //Omvandlar objektet till JSON-sträng till databasen\n  });\n  const data = await response.json();\n  console.log(data);\n}\n\n  // Funktionen för att rensa formuläret vid skicka av datan\n  function resetForm() {\n    document.getElementById('cvForm').reset();\n  }\n  \n\n  // Ladda in CV:er när sidan laddas\n  fetchCvs();\n\n}); "],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}