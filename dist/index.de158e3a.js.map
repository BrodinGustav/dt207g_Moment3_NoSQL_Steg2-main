{"mappings":"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","sources":["src/main.js"],"sourcesContent":["\n// Funktionen för att visa felmeddelanden\nfunction displayErrors(errors) {\n    const errorList = document.getElementById('error-list');\n    errorList.innerHTML = \"\";                       // Rensa befintlig lista\n  \n    errors.forEach(error => {\n        const li = document.createElement('li');\n        li.textContent = error;\n        errorList.appendChild(li);                 // Lägg till felmeddelande i listan\n    });\n  }\n\n  //\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    const url = \"mongodb://localhost:27017/mom3_noSQL\";     //Url till MongoDB-databasen \n  \n    // Kör koden endast om den aktuella sidan är index.html\n    if (window.location.pathname === \"/index.html\") {\n        getData(url);                           // Hämta och visa CV-data\n    }\n  \n    // Kör koden endast om den aktuella sidan är add.html\n    else if (window.location.pathname === \"/add.html\") {\n        \n        //Hämta in ID för cvForm och lägg till lyssnare\n        document.getElementById('cvForm').addEventListener('submit', async function(event) {\n            event.preventDefault();             // Förhindra standardbeteende för formuläret\n            let companyname = document.getElementById('companyname').value;\n            let jobtitle = document.getElementById('jobtitle').value;\n            let location = document.getElementById('location').value;\n       \n        // Skapa en array för att lagra felmeddelanden\n        let errors = [];\n  \n          // Kontrollera om något av fälten är tomt och lägg till lämpligt felmeddelande i arrayen\n          if (!companyname) {\n            errors.push(\"Company name is required\");\n        }\n        if (!jobtitle) {\n            errors.push(\"Job title is required\");\n        }\n        if (!location) {\n            errors.push(\"Location is required\");\n        }\n  \n    // Om det finns fel, visa dem och avbryt formulärinsändningen\n    if (errors.length > 0) {\n      displayErrors(errors);\n      return;\n  }\n  \n  // Om inga fel finns, skicka data till servern och återställ formuläret\n  await createWork(url, companyname, jobtitle, location); // Skicka data till servern\n  await getData(url); // Uppdatera CV-listan efter att data har lagts till\n  resetForm();\n  \n          });\n    }\n  });\n  \n// Funktion för att hämta data och uppdatera listan med arbetslivserfarenheter\nasync function getData(url) {\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    \n    const data = await response.json();\n\n    if (!Array.isArray(data)) {\n      throw new Error('Data is not an array');\n  }\n\n    const ul = document.getElementById('cv-list');\n    if (!ul) {\n      console.error(\"UL element not found\");\n      return;\n    }\n   \n    ul.innerHTML = \"\";                          //Rensar listan\n    data.forEach(work => {\n      const li = document.createElement('li');  //Skapar <li>-element\n  \n      const companySpan = createSpanWithText(`Company: ${work.companyname}`);\n      const jobTitleSpan = createSpanWithText(`Job Title: ${work.jobtitle}`);\n      const locationSpan = createSpanWithText(`Location: ${work.location}`);\n  \n      // Skapa delete-knapp\n      const deleteBtn = document.createElement('button');\n      deleteBtn.textContent = 'Delete';\n      deleteBtn.addEventListener('click', async () => {\n        await deleteWork(url, work.id);          // Anropa deleteWork med URL och ID för arbetslivserfarenhet\n        await getData(url);                      // Uppdatera listan efter borttagning av data\n      });\n  \n      // Lägg till spans och delete-knapp i <li>-elementet\n      li.appendChild(companySpan);\n      li.appendChild(jobTitleSpan);\n      li.appendChild(locationSpan);\n      li.appendChild(deleteBtn);\n  \n      ul.appendChild(li);                       //Lägger till <li>-element till <ul>\n    });\n  }  \n\n  // Skapar <span> med angiven text och fetstil\nfunction createSpanWithText(text) {\n    const span = document.createElement('span');\n    span.textContent = text;\n    span.style.fontWeight = 'bold';\n    return span;\n  }\n  \n// Funktion för ta bort en arbetslivserfarenhet\nasync function deleteWork(url, id) {                    //URL och id som argument      \n    try {\n      const response = await fetch(`${url}/${id}`, {  //Skickar förfrågan till databasens url och id för radering\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete work experience');\n      }\n      console.log('Work experience deleted successfully');\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  // Funktion för att lägga till ny arbetslivserfarenhet till servern\nasync function createWork(url, companyname, jobtitle, location) {\n    let work = {                                        //Skapar nytt objekt som skickar till databasen\n        companyname: companyname,\n        jobtitle: jobtitle,\n        location: location\n    };\n    const response = await fetch(url, {                 //Databasens URL som argument   \n        method: \"POST\",                                 //POST för att skicka data till databasen\n        headers: {\n            \"content-type\": \"Application/json\"          //Anger att det är JSON-data som skickas till databasen\n        },\n        body: JSON.stringify(work)                      //Omvandlar objektet till JSON-sträng till databasen\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  \n  // Funktionen för att rensa formuläret vid skicka av datan\nfunction resetForm() {\n    document.getElementById('cvForm').reset();\n  }\n  \n"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}